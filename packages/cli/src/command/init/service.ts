import fs from 'fs';
import path from 'path';

import { I18nConfig } from '@99mini/i18n-shared';

type InitProjectArgs = Required<I18nConfig> & {
  force?: boolean;
  ext: 'ts' | 'js' | 'mjs' | 'cjs' | 'json' | 'rc';
};

const projectPath = process.cwd();

/**
 * ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
 * - tsconfig.jsonÏóê .i18n/schema.d.ts Ï∂îÍ∞Ä
 * - .gitignoreÏóê .i18n Ï∂îÍ∞Ä
 * - Í∏∞Î≥∏ ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
 * @param args
 */
export function initProject(args: InitProjectArgs) {
  // 1. Í∏∞Î≥∏ ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
  createConfigFile(args);

  // 2. Í∏∞Î≥∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
  createI18nDirectory(args.outputDir);

  // 3. tsconfig.json ÏàòÏ†ï
  updateTsConfig();

  // 4. .gitignore ÏàòÏ†ï
  updateGitignore(args.outputDir);

  console.log('‚úÖ i18n project initialized.');
}

/**
 * .i18n ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
 */
function createI18nDirectory(outputDir: string) {
  const i18nDirPath = path.join(projectPath, outputDir);

  if (!fs.existsSync(i18nDirPath)) {
    fs.mkdirSync(i18nDirPath, { recursive: true });
    console.log('üìÅ .i18n directory created.');
  } else {
    console.log('üìÅ .i18n directory already exists.');
  }
}

/**
 * tsconfig.json ÌååÏùº ÏàòÏ†ï
 * - includeÏóê .i18n/schema.d.ts Ï∂îÍ∞Ä
 */
function updateTsConfig() {
  const tsconfigPath = path.join(projectPath, 'tsconfig.json');

  // tsconfig.jsonÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
  if (!fs.existsSync(tsconfigPath)) {
    console.log('‚ö†Ô∏è tsconfig.json not found.');
    return;
  }

  try {
    const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));

    // include Î∞∞Ïó¥Ïù¥ ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
    if (!tsconfig.include) {
      tsconfig.include = [];
    }

    // .i18n/schema.d.tsÍ∞Ä Ïù¥ÎØ∏ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    if (!tsconfig.include.includes('.i18n/schema.d.ts')) {
      tsconfig.include.push('.i18n/schema.d.ts');

      // ÌååÏùº Ïì∞Í∏∞
      fs.writeFileSync(tsconfigPath, JSON.stringify(tsconfig, null, 2));
      console.log('‚úÖ tsconfig.json updated.');
    } else {
      console.log('‚úÖ tsconfig.json already updated.');
    }
  } catch (error) {
    console.error('‚ùå tsconfig.json update failed:', error);
  }
}

/**
 * .gitignore ÌååÏùº ÏàòÏ†ï
 * - .i18n Ï∂îÍ∞Ä
 */
function updateGitignore(outputDir: string) {
  const gitignorePath = path.join(projectPath, '.gitignore');

  // .gitignore ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
  if (!fs.existsSync(gitignorePath)) {
    // ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
    fs.writeFileSync(gitignorePath, `# i18n\n${outputDir}\n`);
    console.log('‚úÖ .gitignore created.');
    return;
  }

  // ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ ÎÇ¥Ïö© ÏùΩÍ∏∞
  const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');

  // .i18nÏù¥ Ïù¥ÎØ∏ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  if (!gitignoreContent.includes(outputDir)) {
    // ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
    const updatedContent = gitignoreContent.trim() + `\n\n# i18n\n${outputDir}\n`;
    fs.writeFileSync(gitignorePath, updatedContent);
    console.log('‚úÖ .gitignore updated.');
  } else {
    console.log('‚úÖ .gitignore already updated.');
  }
}

/**
 * i18n.config.js ÌååÏùº ÏÉùÏÑ±
 */
function createConfigFile(args: InitProjectArgs) {
  let filename = 'i18n.config';
  if (args.ext === 'rc') {
    filename = '.i18nrc';
  } else {
    filename += `.${args.ext}`;
  }
  const configPath = path.join(projectPath, filename);

  // ÌååÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
  if (fs.existsSync(configPath)) {
    console.log('‚úÖ i18n.config.js already exists.');
    return;
  }

  let configContent = '';

  if (args.ext === 'rc' || args.ext === 'json') {
    configContent = `{
  "outputDir": "${args.outputDir}",
  "localesDir": "${args.localesDir}",
  "defaultLanguage": "${args.defaultLanguage}",
  "supportedLanguages": [${args.supportedLanguages.map((lang) => `"${lang}"`).join(', ')}]
}`;
  } else {
    const defulatConfigContent = `{
  /** output directory */
  outputDir: "${args.outputDir}",
  /** locales directory */
  localesDir: "${args.localesDir}",
  /** default language */
  defaultLanguage: "${args.defaultLanguage}",
  /** supported languages */
  supportedLanguages: [${args.supportedLanguages.map((lang) => `"${lang}"`).join(', ')}],
}`;
    if (args.ext === 'ts') {
      configContent = `import { I18nConfig } from '@99mini/i18n-cli';

const config: I18nConfig = ${defulatConfigContent};

export default config;`;
    } else if (args.ext === 'js' || args.ext === 'cjs') {
      configContent = `/*
 * @type {import('@99mini/i18n-cli').I18nConfig}
 */
module.exports = ${defulatConfigContent};`;
    } else if (args.ext === 'mjs') {
      configContent = `/*
 * @type {import('@99mini/i18n-cli').I18nConfig}
 */
export default ${defulatConfigContent};`;
    } else {
      throw new Error(`Unsupported file extension: ${args.ext}`);
    }
  }

  // ÌååÏùº Ïì∞Í∏∞
  fs.writeFileSync(configPath, configContent);
  console.log(`‚úÖ ${filename} created.`);
}
